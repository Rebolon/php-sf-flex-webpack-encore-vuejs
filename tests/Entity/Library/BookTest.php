<?php

namespace App\Tests\Entity\Library;

use App\Entity\Library\Author;
use App\Entity\Library\Book;
use App\Entity\Library\Job;
use App\Entity\Library\ProjectBookCreation;
use App\Tests\Common\ApiAbstract;
use App\Tests\Common\ToolsAbstract;
use App\Tests\Common\WebPagesAbstract;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\DBAL\DBALException;
use PHPUnit\Framework\TestCase;

class BookTest extends WebPagesAbstract
{
    use \App\Tests\Common\TestCase;

    /**
     * @var Book
     */
    public $book;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->book = new Book();
        $this->book->setTitle('Test BookTest');
    }

    public function testSetAuthors()
    {
        $authors = $this->getAuthorsArrayCollection();

        $this->book->setAuthors($authors);

        $this->assertCount(2, $this->book->getAuthors());
        $this->assertContains($authors[0], $this->book->getAuthors());
        $this->assertContains($authors[1], $this->book->getAuthors());
    }

    /**
     * Add authors to book
     * Then try to add already existing authors: it should not add it
     * Then persist in DB and try to add an existing authors: it should not add it
     *
     * @throws DBALException
     */
    public function testAddAuthors()
    {
        $authors = $this->getAuthorsArrayCollection();

        $this->book->setAuthors($authors);
        // add existing authors (same instance)
        $this->book->addAuthors($authors[0]);
        $this->assertCount(2, $this->book->getAuthors());

        // add existing authors (different instance)
        $writer = $this->getAuthor(2, 'Paul', 'Smith');
        $jobWriter = $this->getJob(2, 'WRITER');
        $projectWriter = $this->getProjectCreation(2, $writer, $jobWriter, $this->book);
        $this->book->addAuthors($projectWriter);

        $this->assertCount(2, $this->book->getAuthors());

        $this->em->persist($this->book);
        $this->em->flush();

        // add the same author without the id
        $author = (new Author())
            ->setFirstname('Paul')
            ->setLastname('Smith');

        $projectWriter = $this->getProjectCreation(null, $author, $jobWriter, $this->book);
        $this->book->addAuthors($projectWriter);

        $this->em->persist($this->book);
        $this->em->flush();

        $dbBookResult = $this->dbCon->fetchAssoc('SELECT * FROM book WHERE id = ' . $this->book->getId());
        $dbAuthorsResult = $this->dbCon->fetchAll('SELECT * FROM project_book_creation WHERE book_id = ' . $dbBookResult['id']);
        $this->assertCount(2, $dbAuthorsResult);
    }

    /**
     * Add one author to book
     * Then try to add already existing authors: it should not add it
     * Then persist in DB and try to add an existing authors: it should not add it
     */
    public function testAddAuthor()
    {
        $authors = $this->getAuthorsArrayCollection();

        $this->book->setAuthors($authors);
        // add existing authors (same instance)
        $this->book->addAuthor($authors[0]->getAuthor(), $authors[0]->getRole());
        $this->assertCount(2, $this->book->getAuthors());

        // add existing authors (different instance)
        $writer = $this->getAuthor(2, 'Paul', 'Smith');
        $jobWriter = $this->getJob(2, 'WRITER');

        $this->book->addAuthor($writer, $jobWriter);

        $this->assertCount(2, $this->book->getAuthors());

        $this->em->persist($this->book);
        $this->em->flush();

        // add the same author without the id (but reuse the role)
        $author = (new Author())
            ->setFirstname('Paul')
            ->setLastname('Smith');

        $this->getProjectCreation(null, $author, $jobWriter, $this->book);
        $this->book->addAuthor($author, $jobWriter);

        $this->em->persist($this->book);
        $this->em->flush();

        $dbBookResult = $this->dbCon->fetchAssoc('SELECT * FROM book WHERE id = ' . $this->book->getId());
        $dbAuthorsResult = $this->dbCon->fetchAll('SELECT * FROM project_book_creation WHERE book_id = ' . $dbBookResult['id']);
        $this->assertCount(2, $dbAuthorsResult);
    }

    protected function getAuthorsArrayCollection(): ArrayCollection
    {
        $authors = new ArrayCollection();

        $drawer = $this->getAuthor(1, 'Marc', "O'Brian");
        $writer = $this->getAuthor(2, 'Paul', 'Smith');
        $jobDrawer = $this->getJob(1, 'DRAWER');
        $jobWriter = $this->getJob(2, 'WRITER');

        $projectDrawer = $this->getProjectCreation(1, $drawer, $jobDrawer, $this->book);
        $projectWriter = $this->getProjectCreation(2, $writer, $jobWriter, $this->book);

        $authors->add($projectDrawer);
        $authors->add($projectWriter);

        return $authors;
    }

    protected function getAuthor($id, $firstname, $lastname)
    {
        $author = new Author();

        $author
            ->setId($id)
            ->setFirstname($firstname)
            ->setLastname($lastname);

        return $author;
    }

    protected function getJob($id, $key)
    {
        $job = new Job();

        $job
            ->setId($id)
            ->setTranslationKey($key);

        return $job;
    }

    protected function getProjectCreation($id, $author, $job, $book)
    {
        $project = new ProjectBookCreation();

        $project
            ->setId($id)
            ->setAuthor($author)
            ->setRole($job)
            ->setBook($book)
        ;

        return $project;
    }
}
